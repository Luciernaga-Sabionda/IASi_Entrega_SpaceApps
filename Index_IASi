<!doctype html>
<html lang="es">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width,initial-scale=1">
	<title>IASi – Índice de Anomalía Sísmica inteligente</title>
	<link rel="preconnect" href="https://cdn.jsdelivr.net">
	<link rel="preconnect" href="https://unpkg.com">
	<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">
	<style>
		:root {
			--bg: #0b0f14;
			--fg: #e6edf3;
			--muted: #9fb0c0;
			--accent: #72d1ff;
			--warn: #ffd36a;
			--alert: #ff7b72;
			--ok: #8be989;
			--card: #0f1520;
			--card-2: #121a26;
		}
		html, body {
			margin: 0; padding: 0;
			background: var(--bg); color: var(--fg);
			font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
		}
		.container {
			max-width: 1200px; margin: 0 auto; padding: 16px;
		}
		header { display: flex; align-items: baseline; gap: 8px; margin-bottom: 12px; }
		header h1 { font-size: 20px; margin: 0; }
		header .tag { color: var(--muted); font-size: 13px; }
		.grid {
			display: grid; gap: 12px;
			grid-template-columns: 1.25fr 1fr;
		}
		@media (max-width: 980px) {
			.grid { grid-template-columns: 1fr; }
		}
		.card {
			background: linear-gradient(180deg, var(--card), var(--card-2));
			border: 1px solid #1a2433; border-radius: 10px; padding: 12px;
		}
		.card h3 {
			margin: 0 0 8px 0; font-size: 14px; color: var(--muted); font-weight: 600;
		}
		#map { width: 100%; height: 360px; border-radius: 8px; overflow: hidden; }
		.row { display: grid; grid-template-columns: 1fr 1fr; gap: 12px; }
		@media (max-width: 980px) { .row { grid-template-columns: 1fr; } }
		canvas { width: 100% !important; height: 280px !important; }
		.meta {
			display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; margin-top: 8px;
		}
		@media (max-width: 980px) { .meta { grid-template-columns: repeat(2, 1fr); } }
		.kpi {
			border: 1px solid #1a2433; border-radius: 8px; padding: 10px; background: #0e1622;
		}
		.kpi .label { font-size: 12px; color: var(--muted); margin-bottom: 6px; }
		.kpi .value { font-size: 18px; font-weight: 700; }
		.badge {
			display: inline-block; font-size: 12px; padding: 2px 8px; border-radius: 999px; margin-left: 6px;
			vertical-align: middle; font-weight: 600;
		}
		.badge.obs { background: rgba(139,233,137,0.12); color: var(--ok); border: 1px solid rgba(139,233,137,0.35);}
		.badge.caution { background: rgba(255,211,106,0.12); color: var(--warn); border: 1px solid rgba(255,211,106,0.35);}
		.badge.alert { background: rgba(255,123,114,0.12); color: var(--alert); border: 1px solid rgba(255,123,114,0.35);}
		.legend { font-size: 12px; color: var(--muted); display: flex; gap: 12px; margin-top: 6px; flex-wrap: wrap; }
		.dot { width: 10px; height: 10px; border-radius: 2px; display: inline-block; margin-right: 6px; vertical-align: baseline; }
		hr { border: none; border-top: 1px solid #1a2433; margin: 12px 0; }
		select, input[type="date"] {
			background: #0e1622; color: var(--fg); border: 1px solid #1a2433; border-radius: 8px; padding: 6px 8px; font-size: 13px;
		}
		.toolbar { display: flex; gap: 8px; align-items: center; flex-wrap: wrap; }
		footer { color: var(--muted); font-size: 12px; margin-top: 16px; }
		a { color: var(--accent); text-decoration: none; }
		a:hover { text-decoration: underline; }

		/* Toasts y utilidades */
		.toast {
		  background:#0e1622; border:1px solid #1a2433; color:#e6edf3;
		  padding:10px 12px; border-radius:10px; min-width:240px; box-shadow:0 4px 18px rgba(0,0,0,.35);
		  font-size:13px;
		}
		.toast.error { border-color:#ff7b72; }
		.toast.info  { border-color:#72d1ff; }
		.hidden { display:none !important; }
	</style>
</head>
<body>
		<div class="container">
		<!-- Spinner global -->
		<div id="spinner" aria-live="polite" aria-busy="true" hidden
		     style="position:fixed;inset:0;display:grid;place-items:center;background:rgba(0,0,0,.35);z-index:9999">
		  <div role="status" aria-label="Cargando" style="padding:10px 14px;border-radius:10px;background:#0e1622;border:1px solid #1a2433;color:#9fb0c0">
		    Cargando…
		  </div>
		</div>

		<!-- Toasts -->
		<div id="toasts" aria-live="assertive" aria-atomic="true"
		     style="position:fixed;right:12px;bottom:12px;display:flex;flex-direction:column;gap:8px;z-index:10000"></div>
		<header>
			<h1>IASi</h1>
			<span class="tag">Índice de Anomalía Sísmica inteligente</span>
			<span id="stateBadge" class="badge obs">Observación</span>
		</header>

		<div class="toolbar" style="margin-bottom:12px">
			<label>Evento:
				<select id="eventSelect" aria-label="Seleccionar evento">
					<option value="Maule_2010">Maule 2010</option>
					<option value="Valdivia_1960">Valdivia 1960</option>
					<option value="Illapel_2015">Illapel 2015</option>
					<option value="EC_CO_1906">Ecuador–Colombia 1906</option>
				</select>
			</label>
			<label>Ventana:
				<select id="windowSelect" aria-label="Seleccionar ventana">
					<option value="7">7 días</option>
					<option value="14" selected>14 días</option>
					<option value="30">30 días</option>
				</select>
			</label>
			<span class="legend">
				<span><span class="dot" style="background:#72d1ff"></span>IASi</span>
				<span><span class="dot" style="background:#8be989"></span>A</span>
				<span><span class="dot" style="background:#ffd36a"></span>R</span>
				<span><span class="dot" style="background:#ff9ee5"></span>D</span>
				<span><span class="dot" style="background:#c8b6ff"></span>M</span>
				<span><span class="dot" style="background:#ffa07a"></span>S</span>
			</span>
			<span style="flex:1 1 auto"></span>
			<small class="tag">Umbrales: Obs < 0.50 • Prec 0.50–0.69 • Alerta ≥ 0.70</small>
		</div>

		<div class="grid">
			<div class="card">
				<h3>Mapa AOI y eventos</h3>
				<div id="map" role="img" aria-label="Mapa de AOI y epicentro"></div>
			</div>
			<div class="card">
				<h3>Contribución por señal (A/R/D/M/S)</h3>
				<canvas id="bars" role="img" aria-label="Contribución por señal"></canvas>
				<div class="meta">
					<div class="kpi"><div class="label">IASi actual</div><div id="kpiScore" class="value">—</div></div>
					<div class="kpi"><div class="label">Estado</div><div id="kpiState" class="value">—</div></div>
					<div class="kpi"><div class="label">Fecha</div><div id="kpiDate" class="value">—</div></div>
					<div class="kpi"><div class="label">Ventana</div><div id="kpiWin" class="value">14d</div></div>
				</div>
			</div>
		</div>

		<div class="row" style="margin-top:12px">
			<div class="card">
				<h3>Timeline IASi</h3>
				<canvas id="line" role="img" aria-label="Timeline IASi"></canvas>
			</div>
			<div class="card">
				<h3>Métricas rápidas</h3>
				<div class="meta">
					<div class="kpi"><div class="label">AUC‑PR</div><div id="kpiPR" class="value">—</div></div>
					<div class="kpi"><div class="label">F1</div><div id="kpiF1" class="value">—</div></div>
					<div class="kpi"><div class="label">Falsas alarmas/mes</div><div id="kpiFA" class="value">—</div></div>
					<div class="kpi"><div class="label">Lead time (días)</div><div id="kpiLT" class="value">—</div></div>
				</div>
				<hr>
				<small class="tag">Fuente de verdad: config/weights.yaml y config/thresholds.yaml</small>
			</div>
		</div>

		<footer>
			<hr>
			<div>Demo ligera. Carga iasi.json y AOI GeoJSON locales. Probabilidad, no determinismo; requiere revisión humana.</div>
		</footer>
	</div>

	<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1"></script>
	<script>
	// Config
	const COLORS = {
		iasi: "#72d1ff",
		A: "#8be989",
		R: "#ffd36a",
		D: "#ff9ee5",
		M: "#c8b6ff",
		S: "#ffa07a",
		grid: "#1a2433",
		text: "#9fb0c0",
	};
	// Umbrales por defecto (se pueden sobrescribir leyendo config/thresholds.yaml en otro paso)
	const TH = { observation: 0.50, caution_min: 0.50, caution_max: 0.69, alert: 0.70 };

	// Utilidades
	function stateFromScore(x) {
		if (x >= TH.alert) return { name: "Alerta", cls: "alert" };
		if (x >= TH.caution_min && x <= TH.caution_max) return { name: "Precaución", cls: "caution" };
		return { name: "Observación", cls: "obs" };
	}
	function fmt(x, d=2) { return (x ?? 0).toFixed(d); }

	// Datos en memoria
	let DATA = {
		// iasi.json esperado:
		// {
		//   "meta": {"name":"Maule_2010","lat":-35.0,"lon":-72.5,"aoi_path":"config/aoi_maule.geojson"},
		//   "timeline": [{"date":"YYYY-MM-DD","A":0..1,"R":0..1,"D":0..1,"M":0..1,"S":0..1,"IASi":0..1}, ...],
		//   "metrics": {"7":{"auc_pr":0.58,"f1":0.51,"false_alarm_pm":1.5,"lead_time_days":3},"14":{...},"30":{...}}
		// }
		events: {} // se llenará con fetch por evento
	};

	// Helpers: Spinner, toasts y fetch seguro
	const Spinner = {
	  show(){ document.getElementById('spinner').hidden = false; },
	  hide(){ document.getElementById('spinner').hidden = true; }
	};

	function toast(msg, type='info', timeout=4500){
	  const box = document.getElementById('toasts');
	  const el = document.createElement('div');
	  el.className = `toast ${type}`;
	  el.textContent = msg;
	  box.appendChild(el);
	  setTimeout(()=> el.remove(), timeout);
	}

	async function safeFetchJSON(url, {schema='unknown', requiredKeys=[]} = {}) {
	  try {
	    const res = await fetch(url, {cache:'no-store'});
	    if (!res.ok) throw new Error(`HTTP ${res.status} en ${url}`);
	    const data = await res.json();
	    if (requiredKeys.length) {
	      const missing = requiredKeys.filter(k => !(k in data));
	      if (missing.length) throw new Error(`Esquema ${schema} inválido. Faltan: ${missing.join(', ')}`);
	    }
	    return { ok:true, data };
	  } catch (err) {
	    return { ok:false, error: err instanceof Error ? err.message : String(err) };
	  }
	}

	// Carga robusta de evento con validación y fallback
	async function loadEvent(name) {
	  const path = `outputs/indices/${name}/iasi.json`;
	  const res = await safeFetchJSON(path, {
	    schema: 'iasi.json',
	    requiredKeys: ['meta','timeline','metrics']
	  });

	  if (res.ok) {
	    const { meta, timeline, metrics } = res.data;
	    const tlOK = Array.isArray(timeline) && timeline.every(d =>
	      d && typeof d.date === 'string' && typeof d.IASi === 'number'
	    );
	    const metOK = metrics && typeof metrics === 'object';
	    if (tlOK && metOK) return res.data;

	    toast(`El archivo iasi.json de ${name} está mal formado. Uso modo demo.`, 'error');
	  } else {
	    toast(`No se pudo cargar iasi.json de ${name}: ${res.error}. Uso modo demo.`, 'error');
	  }

	  // Fallback demo mínimo
	  const today = new Date(), days = 30, tl = [];
	  for (let i=days-1; i>=0; i--) {
	    const d = new Date(today); d.setDate(today.getDate()-i);
	    const iso = d.toISOString().slice(0,10);
	    const A = 0.3 + 0.2*Math.sin(i/5);
	    const R = 0.4 + 0.15*Math.cos(i/6);
	    const D = 0.2 + 0.5*Math.max(0, Math.sin(i/9));
	    const M = 0.2 + 0.3*Math.random()*0.2;
	    const S = 0.3 + 0.2*Math.cos(i/7);
	    const IASi = 0.25*A + 0.20*R + 0.25*D + 0.15*M + 0.15*S;
	    tl.push({date: iso, A, R, D, M, S, IASi});
	  }
	  return {
	    meta: { name, lat: -35.0, lon: -72.5, aoi_path: "config/aoi.geojson" },
	    timeline: tl,
	    metrics: {
	      "7":  { auc_pr: 0.58, f1: 0.50, false_alarm_pm: 1.5, lead_time_days: 3 },
	      "14": { auc_pr: 0.62, f1: 0.52, false_alarm_pm: 1.4, lead_time_days: 3 },
	      "30": { auc_pr: 0.55, f1: 0.49, false_alarm_pm: 1.8, lead_time_days: 2 }
	    }
	  };
	}

	// Mapa Leaflet
	let map, aoiLayer, epicenterMarker;
	function initMap() {
		map = L.map('map', { zoomControl: true, scrollWheelZoom: false });
		const tiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '&copy; OpenStreetMap'
		});
		tiles.addTo(map);
		map.setView([0, -75], 3);
	}

	async function drawAOI(meta) {
	  if (aoiLayer) { aoiLayer.remove(); aoiLayer = null; }
	  if (epicenterMarker) { epicenterMarker.remove(); epicenterMarker = null; }

	  // Epicentro marcador si existe
	  if (typeof meta.lat === 'number' && typeof meta.lon === 'number') {
	    epicenterMarker = L.circleMarker([meta.lat, meta.lon], {
	      radius: 6, color: '#ff7b72', weight: 2, fillColor: '#ff7b72', fillOpacity: 0.8
	    }).addTo(map).bindTooltip(meta.name || 'Evento');
	  }

	  // Intentar AOI
	  if (meta.aoi_path) {
	    const gj = await safeFetchJSON(meta.aoi_path, {schema:'geojson'});
	    if (gj.ok) {
	      try {
	        aoiLayer = L.geoJSON(gj.data, { style: { color: '#72d1ff', weight: 1, fillOpacity: 0.1 } }).addTo(map);
	        map.fitBounds(aoiLayer.getBounds(), { padding: [10,10] });
	        return;
	      } catch (e) {
	        toast(`AOI inválido: ${meta.aoi_path}`, 'error');
	      }
	    } else {
	      toast(`No se pudo cargar AOI: ${gj.error}`, 'error');
	    }
	  }

	  // Fallback de vista
	  if (epicenterMarker) {
	    map.setView([meta.lat, meta.lon], 5);
	  } else {
	    map.setView([0, -75], 3);
	  }
	}

	// Charts
	let lineChart, barsChart;
	function buildLine(ctx, timeline) {
		const labels = timeline.map(d => d.date);
		const data = timeline.map(d => d.IASi);
		const thObs = Array(labels.length).fill(TH.observation);
		const thAlert = Array(labels.length).fill(TH.alert);
		if (lineChart) lineChart.destroy();
		lineChart = new Chart(ctx, {
			type: 'line',
			data: {
				labels,
				datasets: [
					{ label: 'IASi', data, borderColor: COLORS.iasi, backgroundColor: 'rgba(114,209,255,0.18)', fill: true, tension: 0.25, pointRadius: 0 },
					{ label: '0.50', data: thObs, borderColor: '#8be989', borderDash: [6,6], pointRadius: 0 },
					{ label: '0.70', data: thAlert, borderColor: '#ff7b72', borderDash: [6,6], pointRadius: 0 }
				]
			},
			options: {
				responsive: true,
				scales: {
					x: { grid: { color: COLORS.grid }, ticks: { color: COLORS.text } },
					y: { min: 0, max: 1, grid: { color: COLORS.grid }, ticks: { color: COLORS.text } }
				},
				plugins: {
					legend: { labels: { color: COLORS.text } },
					tooltip: {
						mode: 'index', intersect: false,
						callbacks: {
							label: (ctx) => `${ctx.dataset.label}: ${fmt(ctx.parsed.y)}`
						}
					}
				}
			}
		});
	}
	function buildBars(ctx, last) {
		const labels = ['A','R','D','M','S'];
		const vals = [last.A, last.R, last.D, last.M, last.S].map(v => +(v ?? 0));
		const colors = [COLORS.A, COLORS.R, COLORS.D, COLORS.M, COLORS.S];
		if (barsChart) barsChart.destroy();
		barsChart = new Chart(ctx, {
			type: 'bar',
			data: { labels, datasets: [{ label: 'Contribución normalizada', data: vals, backgroundColor: colors }] },
			options: {
				indexAxis: 'y',
				scales: {
					x: { min: 0, max: 1, grid: { color: COLORS.grid }, ticks: { color: COLORS.text } },
					y: { grid: { color: COLORS.grid }, ticks: { color: COLORS.text } }
				},
				plugins: { legend: { display: false } }
			}
		});
	}

	// Render principal
	async function render() {
			Spinner.show();
			try {
				const eventName = document.getElementById('eventSelect').value;
				const win = document.getElementById('windowSelect').value;

				if (!DATA.events[eventName]) {
					DATA.events[eventName] = await loadEvent(eventName);
				}
				const ev = DATA.events[eventName];
				const tl = Array.isArray(ev.timeline) ? ev.timeline : [];

				await drawAOI(ev.meta || {});
				if (!tl.length) {
					toast('Timeline vacía o inválida para este evento.', 'error');
					return;
				}

				buildLine(document.getElementById('line'), tl);
				const last = tl[tl.length-1];
				buildBars(document.getElementById('bars'), last);

				const st = stateFromScore(last.IASi ?? 0);
				const badge = document.getElementById('stateBadge');
				badge.textContent = st.name;
				badge.className = `badge ${st.cls}`;
				document.getElementById('kpiScore').textContent = fmt(last.IASi ?? 0, 2);
				document.getElementById('kpiState').textContent = st.name;
				document.getElementById('kpiDate').textContent = last.date || '—';
				document.getElementById('kpiWin').textContent = `${win}d`;

				const m = (ev.metrics && ev.metrics[win]) || {};
				document.getElementById('kpiPR').textContent = m.auc_pr != null ? fmt(m.auc_pr, 2) : '—';
				document.getElementById('kpiF1').textContent = m.f1 != null ? fmt(m.f1, 2) : '—';
				document.getElementById('kpiFA').textContent = m.false_alarm_pm != null ? fmt(m.false_alarm_pm, 2) : '—';
				document.getElementById('kpiLT').textContent = m.lead_time_days != null ? fmt(m.lead_time_days, 0) : '—';
			} finally {
				Spinner.hide();
			}
	}

	// Init
	window.addEventListener('DOMContentLoaded', async () => {
		initMap();
		document.getElementById('eventSelect').addEventListener('change', render);
		document.getElementById('windowSelect').addEventListener('change', render);
		await render();
	});
	</script>
</body>
</html>